---
title: "Schedule"
format:
  html:
    page-layout: full
execute:
    echo: false
---

This is the schedule for Code Club in FY25/26.

The **Demonstration**, **Presentation**, and **Notebook** columns indicate the content to be expected for each session:

- **Demonstration:** A live show-and-tell relating to the discussion topic.
- **Presentation:** A slide deck covering the discussion topic.
- **Notebook:** A Jupyter Notebook containing code-along elements or examples for people to work through after the session.

Tutorials will be divided into **Modules**. We recommend that people attend or watch tutorials in the Core module in order to gain a fundamental understanding of coding concepts and resources. Further modules are to be confirmed, but will likely include Automation, Dashboards and Visualisation, and Data Science. People will be able to attend those modules that interest them.

We have mapped the contents of the syllabus to competencies in the National Competency Framework for Data Professionals in Health and Care so that you can see which sessions will help you on your way towards them. For full details of the skills in the framework, the self-assessment tool can be found on [FutureNHS](https://future.nhs.uk/DataAnalytics/view?objectID=163018181).

**Please note that this is a first draft of the mapping of NCF competencies to our syllabus and it is awaiting review.**

<!-- ::: column-page -->
```{python}
#| label: schedule_table

import polars as pl
from great_tables import GT, html, style, loc
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# import .csv
df = pl.read_csv('../data/schedule.csv')


# replace 'x' with emojis and create hyperlink markdown
df_processed = df.with_columns(
    pl.col('Demonstration').str.replace('x','\U0001F3AC'),
    pl.col('Presentation').str.replace('x','\U0001F4BB'),
    pl.col('Notebook').str.replace('x','\U0001F4D6'),
    pl.when(pl.col("GitHub").is_not_null() & (pl.col("GitHub").str.len_chars() > 0))
    .then(
        pl.concat_str(
            [pl.lit("["), pl.col("Session Name"), pl.lit("]("), pl.col("GitHub"), pl.lit(")")],
            separator=""
        )
    )
    .otherwise(pl.lit("")) 
    .alias("GitHub Link"),
    pl.when(pl.col("Recording").is_not_null() & (pl.col("Recording").str.len_chars() > 0))
    .then(
        pl.concat_str(
            [pl.lit("["), pl.col("Session Name"), pl.lit("]("), pl.col("Recording"), pl.lit(")")],
            separator=""
        )
    )
    .otherwise(pl.lit(""))
    .alias("Recording Link")
)

df_processed.drop(["Session Number", "GitHub", "GitHub Link", "Recording", "Recording Link"])

# Column Widths for table.
# Please note that these values fit our standard Dell monitors nicely,
# so bear this in mind if you feel the need to change any of them.

COLUMN_WIDTHS = {
            # "Session Number" : "100px",
            "Session Date" : "100px",
            "Module" : "100px",
            "Session Name" : "150px",
            "Description" : "250px",
            # "GitHub Link" : "200px",
            # "Recording Link" : "200px",
            "Demonstration" : "120px",
            "Presentation" : "100px",
            "Notebook" : "100px",
            "NCF Competency" : "200px"

        }

# Render the table as a great_table object
#.select() allows column order to be specified
(
    GT(
        df_processed.select(
            [
                # "Session Number",
                "Session Date",
                "Module",
                "Session Name",
                "Description",
                "Demonstration",
                "Presentation",
                "Notebook",
                # "GitHub Link",
                # "Recording Link",
                "NCF Competency"
            ]
            )
            .fill_null('-') # so that the emoji columns don't return "None" when empty
    )
    # .fmt_markdown(columns=["GitHub Link","Recording Link"]) # turns the hyperlink markdown into rendered link
    .cols_width(COLUMN_WIDTHS)
    .tab_options(quarto_disable_processing=True) # needed to override Quarto's own table formatting
    .cols_align(align="center")
    .opt_align_table_header(align="center")
    .tab_style(
        style=style.text(weight="bold"),
        locations=loc.column_labels()
    )
    .opt_row_striping()
)
```
<!-- ::: -->
