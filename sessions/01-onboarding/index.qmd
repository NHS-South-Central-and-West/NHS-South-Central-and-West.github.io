---
title: "Python Onboarding"
format: html
---

## Session Slides

Use the left ⬅️ and right ➡️ arrow keys to navigate through slides.

<iframe src="slides.html" style="border:1px;" height="500" width="100%"></iframe>

## The Tools You Will Need

- Language: [Python](https://www.python.org/)
- Dependency Management & Virtual Environments: [uv](https://docs.astral.sh/uv/)
- Version Control: [Git](https://git-scm.com/), [GitHub Desktop](https://github.com/apps/desktop)
- IDE: [VS Code](https://code.visualstudio.com/)/[Jupyter Notebooks](https://jupyter.org/) (or your preferred IDE)

You can install all the tools you'll need using the following one liner run in PowerShell:

`winget install astral-sh.uv Microsoft.VisualStudioCode github-desktop`

### Python

- Python is a an all-purpose programming language that is the most popular language in the world, widely used in almost every industry.
- Python's popularity is owed to its flexibility -- it is the second best tool for every job.
- It is a strong choice for data science and analytics, being one of or the best language for data wrangling, data visualisation, statistics, and machine learning.
  - it is also well-suited to front-end development, automation, and orchestration.

### Dependency Management

Dependency management in Python refers to the process of tracking, installing, and updating the external packages (dependencies) that your project needs to run correctly.

It ensures:
  - The right packages are installed.
  - The correct versions are used.
  - Conflicts between packages are avoided.

### Virtual Environments

Virtual environments are isolated Python environments that allow you to manage dependencies for a specific project without the state of those dependencies affecting other projects or your wider system.

Using a virtual environment for every project is necessary because Python's dependencies can be volatile, and keeping each project in a walled off space away from all other projects keeps all your work safe and stable.

They help by:
  - Keeping dependencies separate for each project.
  - Avoiding version conflicts between projects.
  - Making dependency management more predictable and reproducible.

### Version Control

- Version control is the practice of tracking and managing changes to code or files over time, allowing you to:
  - Revert to earlier versions if needed.
  - Collaborate with others without overwriting work.
  - Maintain a history of changes.

### IDE

- An IDE (Integrated Development Environment) is software that provides tools for writing, testing, and debugging code in one place.
- It typically includes a code editor, debugger, and build tools, often with features like syntax highlighting and code completion.
- Some common IDEs used for Python include VS Code, PyCharm, and Positron.
- We will use VS Code or Jupyter Notebooks (which are not a full IDE but are used for writing code).

## Project Setup

- Walk through of how to set up a project
  - Setup with uv (uv init, uv add, uv sync?)
  - Create a notebook (see if I can get IT to fix so can use uv)
  - Run some simple code as evidence of setup


