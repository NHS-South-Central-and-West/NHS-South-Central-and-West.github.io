---
title: "Python Onboarding"
format: html
---

## Session Slides

Use the left ⬅️ and right ➡️ arrow keys to navigate through slides below. To view in a separate tab/window, [follow this link](slides.html).

<iframe src="slides.html" height="500" width="100%"></iframe>

## The Tools You Will Need

While the focus of this course is on Python, there are several other tools that we will be using throughout.

- Language: [Python](https://www.python.org/)
- Dependency Management & Virtual Environments: [uv](https://docs.astral.sh/uv/)
- Version Control: [Git](https://git-scm.com/), [GitHub Desktop](https://github.com/apps/desktop)
- IDE: [VS Code](https://code.visualstudio.com/)/[Jupyter Notebooks](https://jupyter.org/) (or your preferred IDE)

You can install all the tools you'll need by running the following one liner run in PowerShell:

`winget install astral-sh.uv Microsoft.VisualStudioCode github-desktop`

### Python

- Python is a an all-purpose programming language that is the most popular language in the world, widely used in almost every industry.
- Python's popularity is owed to its flexibility -- it is the second best tool for every job.
- It is a strong choice for data science and analytics, being one of or the best language for data wrangling, data visualisation, statistics, and machine learning.
  - It is also well-suited to front-end development, automation, and orchestration.

### Dependency Management

One of Python's greatest weaknesses is dependency management. For all of Python's many strengths, there is no escaping the dependency hell that is a challenge facing every Python user.

Dependency management refers to the process of tracking and managing all of the packages (dependencies) that a project needs to run. It is a consideration in any programming language. It ensures:
  - The right packages are installed.
  - The correct versions are used.
  - Conflicts between packages are avoided.

There are lots of reasons that Python handles dependency management so poorly, but there are some tools that make this a little easier on users. We are using uv for dependency management. It is relatively new but it is quickly becoming the consensus tool for dependency management in Python because it makes the process about as painless as it can be without moving to a different language entirely.

#### Virtual Environments

Virtual environments are a component in dependency management. Dependency management becomes much messier when you have many Python projects each using their own packages, some of which are overlapping and some of which require certain versions, either for compatibility or functionality reasons. Reducing some of this friction by isolating each project in its own virtual environment, like each project is walled off from all other projects, makes dependency management a little easier. Virtual environments allow you to manage dependencies for a specific project without the state of those dependencies affecting other projects or your wider system.

Virtual environments help by:
  - Keeping dependencies separate for each project.
  - Avoiding version conflicts between projects.
  - Making dependency management more predictable and reproducible.

We will use uv for all dependency management, managing virtual environments, and even managing Python versions.

### Version Control

Version control is the practice of tracking and managing changes to code or files over time, allowing you to:
  - Revert to earlier versions if needed.
  - Collaborate with others on the same project easily.
  - Maintain a history of changes.

We are using the version control system Git the platform for hosting our work, GitHub, and we are using GitHub Desktop to manage version control locally.

Version control and Git are an entire topic in their own right and covering them in detail is out of scope for this session. We are hoping to cover version control in a future session, but right now you just need to be able to access materials for these sessions. You can find the materials in the  [Code Club repository](https://github.com/NHS-South-Central-and-West/code-club).

If you have downloaded GitHub Desktop, the easiest way to access these materials and keep up-to-date is by cloning the Code Club repository (go to File, then Clone Repository, select URL, and paste the Code Club repository link in the URL field). You can then make sure that the materials you are using are the most current by clicking the Fetch Origin button in GitHub Desktop, which grabs the changes we've made from the central repository on GitHub.

### IDE

- An IDE (Integrated Development Environment) is software that provides tools for writing, testing, and debugging code in one place.
- It typically includes a code editor, debugger, and build tools, often with features like syntax highlighting and code completion.
- Some common IDEs used for Python include VS Code, PyCharm, and Positron.
- We will use VS Code or Jupyter Notebooks (which are not a full IDE but are used for writing code).

## Project Setup

Every new Python project should start with using uv to set up a virtual environment for the project. This keeps everything neat and tidy, and reduces the risk of finding yourself in dependency hell.

The entire process for setting up a project can be handled in the command line. We will use PowerShell for consistency.

When you open a PowerShell window, it should open in your C drive (ie `C:\Users\user.name`). If it does not, run `cd ~`, and it should return to your root directory.

We will create a new uv project in the root directory[^Root], using the command `uv init`. The new project will contain everything we need, including a Python installation, a virtual environment, and the necessary project files for tracking and managing any packages installed in the virtual environment. To set up a new project called `test-project`, use the following command:

`uv init test-project`

Having created this new directory, navigate to it using `cd test-project`. You can check the files in a directory using the command `ls`. If you run this command, you will see that there are three files in the project directory (`hello.py`, `pyproject.toml`, and `README.md`). The project doesn't yet have a Python installation or a virtual environment, but this will be added when we add external Python packages.

You can install Python packages using the command `uv add`. We can add some common Python packages that we will use in most projects (pandas, numpy, seaborn, and ipykernel[^Dependencies]) using the following command:

`uv add pandas numpy seaborn ipykernel`

The output from this command will reference the Python installation that has been used and the creation of a virtual environment directory `.venv`. Now, if you run `ls`, you will see that there are two new items in the directory, `uv.lock` and `.venv`.

Your Python project is now set up and you are ready to start writing some code. You can open VS Code from your PowerShell window by running `code .`.

For more information about creating and managing projects using uv, check out the [uv documentation](https://docs.astral.sh/uv/guides/projects/#creating-a-new-project).

[^Root]:

We recommend using the C drive for all Python projects, especially if using version control, because storing projects like these on One Drive will create a lot of unnecessary issues.

[^Dependencies]:

Strictly speaking, we should install ipykernel as a development dependency (a dependency that is needed for any development but not when the project is put into production). In this case, we would add it by running `uv add --dev ipykernel`. However, in this case it is simpler to just add it as a regular dependency and doesn't do any harm.
