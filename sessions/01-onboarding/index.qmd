---
title: "Python Onboarding"
format: html
---

This is the first session of Code Club's relaunch. It focuses on giving users all the tools they need to get started using Python and demonstrates the setup for a typical Python project.

## Session Slides

Use the left ⬅️ and right ➡️ arrow keys to navigate through the slides below. To view in a separate tab/window, [follow this link](slides.html){target="_blank"}.

<iframe src="slides.html" height="500" width="100%"></iframe>

## The Tools You Will Need

While this course focuses on Python, we will use several other tools throughout.

- Language: [Python](https://www.python.org/)
- Dependency Management & Virtual Environments: [uv](https://docs.astral.sh/uv/)
- Version Control: [Git](https://git-scm.com/), [GitHub Desktop](https://github.com/apps/desktop)
- IDE: [VS Code](https://code.visualstudio.com/)/[Jupyter Notebooks](https://jupyter.org/) (or your preferred IDE)

You can install all the tools you'll need by running the following one-liner run in PowerShell:

`winget install astral-sh.uv Microsoft.VisualStudioCode github-desktop`

### Python

Python is an all-purpose programming language that is one of, if not the most popular, in the world[^Popularity] and is widely used in almost every industry. Its popularity is owed to its flexibility as a language that can be used to achieve nearly any job. It is often referred to as the second-best tool for every job. Specialist languages might be better for specific tasks (for example, R for statistics), but Python is good at everything.

It is a strong choice for data science and analytics, being one of the best languages for data wrangling, data visualisation, statistics, and machine learning. It is also well-suited to web development, scientific computing, and automation.

[^Popularity]:

Although there are several ways to measure language popularity, the [PYPL Index](https://pypl.github.io/PYPL.html), [HackerRank's Developer
Skills Report](https://www.hackerrank.com/blog/most-popular-languages-2024/), and [IEEE Spectrum](https://spectrum.ieee.org/top-programming-languages-2024) all rank Python as the most popular language in the world, while [Stack Overflow's Developer Survey](https://survey.stackoverflow.co/2024/technology) places Python third behind JavaScript and HTML/CSS.

### Dependency Management

One of Python's greatest weaknesses is dependency management. Despite its many strengths, there is no escaping the dependency hell that every Python user faces.

Dependency management refers to the process of tracking and managing all of the packages (dependencies) a project needs to run. It is a consideration in any programming language. It ensures:

- The right packages are installed.
- The correct versions are used.
- Conflicts between packages are avoided.

There are many reasons that Python handles dependency management so poorly, but there are some tools that make this a little easier on users. We are using uv for dependency management. It is relatively new, but it is quickly becoming the consensus tool for dependency management in Python because it makes the process about as painless as it can be without moving to a different language entirely.

#### Virtual Environments

Virtual environments are a component of dependency management. Dependency management becomes much messier when you have many Python projects, each using their own packages, some overlapping and some requiring specific versions, either for compatibility or functionality reasons. Reducing some of this friction by isolating each project in its own virtual environment, like each project is walled off from all other projects, makes dependency management a little easier. Virtual environments allow you to manage dependencies for a specific project without the state of those dependencies affecting other projects or your wider system.

Virtual environments help by:

- Keeping dependencies separate for each project.
- Avoiding version conflicts between projects.
- Making dependency management more predictable and reproducible.

We will use uv to manage all dependencies, virtual environments, and even versions of Python.

### Version Control

Version control is the practice of tracking and managing changes to code or files over time, allowing you to:

- Revert to earlier versions if needed.
- Collaborate with others on the same project easily.
- Maintain a history of changes.

We are using Git, a version control system, to host our work and GitHub Desktop to manage version control locally.

Version control and Git are topics entirely in their own right, and covering them in detail is out of the scope of this session. We hope to cover version control in a future session, but right now, you just need to be able to access materials for these sessions. You can find the materials in the [Code Club repository](https://github.com/NHS-South-Central-and-West/code-club).

If you have downloaded GitHub Desktop, the easiest way to access these materials and keep up-to-date is by cloning the Code Club repository (go to File, then Clone Repository, select URL, and paste the Code Club repository link in the URL field). You can then ensure that the materials you are using are the most current by clicking the Fetch Origin button in GitHub Desktop, which grabs the changes we've made from the central repository on GitHub.

### IDE

IDEs (Integrated Development Environments) are software that simplifies programming and development by combining many of the most common tasks and helpful features for programming into a single tool. These typically include a code editor, debugging functionality, build tools, and features like syntax highlighting and code completion. When you start your code journey, you might not need all these tools, and fully-featured IDEs can be overwhelming. But as you become more comfortable with programming, all these different features will become very valuable.

Some common IDEs that are used for Python include:

- VS Code
- PyCharm
- Vim
- Jupyter Notebooks/JupyterLab
- Positron

We will use VS Code or Jupyter Notebooks (which is not exactly an IDE but is similar).

## Project Setup

Every new Python project should start with using uv to set up a virtual environment for the project to keep everything organised and reduce the risk of finding yourself in dependency hell.

The entire project setup process can be handled in the command line. We will use PowerShell for consistency.

When you open a PowerShell window, it should open in your C drive (e.g.,  `C:\Users\user.name`). If it does not, run `cd ~`, and it should return to your home directory.

We will create a new uv project in the home directory[^Dir] using the command `uv init`. The new project will contain everything we need, including a Python installation, a virtual environment, and the necessary project files for tracking and managing any packages installed in the virtual environment. To set up a new project called `test-project`, use the following command:

`uv init test-project`

Having created this new directory, navigate to it using `cd test-project`. You can check the files in a directory using the command `ls`. If you run this command, you will see three files in the project directory (`hello.py`, `pyproject.toml`, and `README.md`). The project doesn't yet have a Python installation or a virtual environment, but this will be added when we add external Python packages.

You can install Python packages using the command `uv add`. We can add some common Python packages that we will use in most projects (pandas, numpy, seaborn, and ipykernel[^Dependencies]) using the following command:

`uv add pandas numpy seaborn ipykernel`

The output from this command will reference the Python installation used and the creation of a virtual environment directory `.venv`. Now, if you run `ls`, you will see two new items in the directory, `uv.lock` and `.venv`.

Your Python project is now set up, and you are ready to start writing some code. You can open VS Code from your PowerShell window by running `code .`.

For more information about creating and managing projects using uv, check out the [uv documentation](https://docs.astral.sh/uv/guides/projects/#creating-a-new-project).

[^Dir]:

We recommend using the C drive for all Python projects, especially if using version control. Storing projects like these on One Drive will create many unnecessary issues.

[^Dependencies]:

Strictly speaking, we should install ipykernel as a development dependency (a dependency that is needed for any development but not when the project is put into production). In this case, we would add it by running `uv add --dev ipykernel.` However, in this case, it is simpler to just add it as a regular dependency, and it doesn't harm.
