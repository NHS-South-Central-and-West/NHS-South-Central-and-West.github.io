{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Schedule\"\n",
        "execute:\n",
        "    echo: false\n",
        "---\n",
        "\n",
        "\n",
        "This is the schedule for Code Club in FY25/26.\n",
        "\n",
        "Materials, including presentations and coding notebooks, have been made available in the associated **GitHub** repository and recordings of the sessions will be accessible via the **Recording Link**.\n",
        "\n",
        "The **Demonstration**, **Presentation**, and **Notebook** columns indicate the content to be expected for each session:\n",
        "\n",
        "- **Demonstration:** A live show-and-tell relating to the discussion topic.\n",
        "- **Presentation:** A slide deck covering the discussion topic.\n",
        "- **Notebook:** A Jupyter Notebook containing code-along elements or examples for people to work through after the session.\n",
        "\n",
        "Tutorials will be divided into **Modules**. We recommend that people attend or watch tutorials in the Core module in order to gain a fundamental understanding of coding concepts and resources. Further modules are to be confirmed, but will likely include Automation, Dashboards and Visualisation, and Data Science. People will be able to attend those modules that interest them.\n",
        "\n",
        "::: column-screen-inset-right"
      ],
      "id": "01195f06"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import polars as pl\n",
        "from great_tables import GT, html, style, loc\n",
        "import warnings\n",
        "warnings.simplefilter(action='ignore', category=FutureWarning)\n",
        "\n",
        "# import .csv\n",
        "df = pl.read_csv('data/schedule.csv')\n",
        "\n",
        "# replace 'x' with emojis and create hyperlink markdown\n",
        "df_processed = df.with_columns(\n",
        "    pl.col('Demonstration').str.replace('x','\\U0001F3AC'),\n",
        "    pl.col('Presentation').str.replace('x','\\U0001F4BB'),\n",
        "    pl.col('Notebook').str.replace('x','\\U0001F4D6'),\n",
        "    pl.when(pl.col(\"GitHub\").is_not_null() & (pl.col(\"GitHub\").str.len_chars() > 0))\n",
        "    .then(\n",
        "        pl.concat_str(\n",
        "            [pl.lit(\"[\"), pl.col(\"Session Name\"), pl.lit(\"](\"), pl.col(\"GitHub\"), pl.lit(\")\")],\n",
        "            separator=\"\"\n",
        "        )\n",
        "    )\n",
        "    .otherwise(pl.lit(\"\")) \n",
        "    .alias(\"GitHub Link\"),\n",
        "    pl.when(pl.col(\"Recording\").is_not_null() & (pl.col(\"Recording\").str.len_chars() > 0))\n",
        "    .then(\n",
        "        pl.concat_str(\n",
        "            [pl.lit(\"[\"), pl.col(\"Session Name\"), pl.lit(\"](\"), pl.col(\"Recording\"), pl.lit(\")\")],\n",
        "            separator=\"\"\n",
        "        )\n",
        "    )\n",
        "    .otherwise(pl.lit(\"\")) \n",
        "    .alias(\"Recording Link\")\n",
        ")\n",
        "\n",
        "df_processed.drop([\"GitHub\",\"Recording\"])\n",
        "\n",
        "# Column Widths for table.\n",
        "# Please note that these values fit our standard Dell monitors nicely,\n",
        "# so bear this in mind if you feel the need to change any of them.\n",
        "\n",
        "COLUMN_WIDTHS = {\n",
        "            \"Session Number\" : \"100px\",\n",
        "            \"Session Date\" : \"100px\",\n",
        "            \"Module\" : \"100px\",\n",
        "            \"Session Name\" : \"200px\",\n",
        "            \"Description\" : \"400px\",\n",
        "            \"GitHub Link\" : \"200px\",\n",
        "            \"Recording Link\" : \"200px\",\n",
        "            \"Demonstration\" : \"120px\",\n",
        "            \"Presentation\" : \"100px\",\n",
        "            \"Notebook\" : \"100px\"\n",
        "\n",
        "        }\n",
        "\n",
        "# Render the table as a great_table object\n",
        "#.select() allows column order to be specified\n",
        "(\n",
        "    GT(\n",
        "        df_processed.select(\n",
        "            [\n",
        "                \"Session Number\",\n",
        "                \"Session Date\",\n",
        "                \"Module\",\n",
        "                \"Session Name\",\n",
        "                \"Description\",\n",
        "                \"Demonstration\",\n",
        "                \"Presentation\",\n",
        "                \"Notebook\",\n",
        "                \"GitHub Link\",\n",
        "                \"Recording Link\"\n",
        "            ]\n",
        "            )\n",
        "            .fill_null('-') # so that the emoji columns don't return \"None\" when empty\n",
        "    )\n",
        "    .fmt_markdown(columns=[\"GitHub Link\",\"Recording Link\"]) # turns the hyperlink markdown into rendered link\n",
        "    .cols_width(COLUMN_WIDTHS)\n",
        "    .tab_options(quarto_disable_processing=True) # needed to override Quarto's own table formatting\n",
        "    .cols_align(align=\"center\")\n",
        "    .opt_align_table_header(align=\"center\")\n",
        "    .tab_style(\n",
        "        style=style.text(weight=\"bold\"),\n",
        "        locations=loc.column_labels()\n",
        "    )\n",
        "    .opt_row_striping()\n",
        ")\n"
      ],
      "id": "cf4dc461",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::"
      ],
      "id": "ffe6ac66"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\edward.chick\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}