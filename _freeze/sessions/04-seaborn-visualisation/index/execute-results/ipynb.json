{
  "hash": "d13ae7aec25036044c716fb06a6a9fe3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Visualisation with Seaborn\"\nformat:\n  html: default\n  ipynb: default\n---\n\nPython has a rich ecosystem of libraries for data visualisation, each with different strengths. Some popular options include matplotlib for fine control over plots, plotly for interactive visualisations, and bokeh for web-ready dashboards. In this session, we’ll be using seaborn. It's built on top of matplotlib but offers a simpler, high-level interface and nice looking default styles — it's therefore a good choice when you who want to quickly create clear and informative plots without needing to tweak every detail.\n\n![Python visualisation libraries.](../../resources/python_visual_libraries.png)\n\nWe are using [Australian weather data](https://www.kaggle.com/datasets/jsphyg/weather-dataset-rattle-package), taken from [Kaggle](https://kaggle.com). This dataset is used to build machine learning models that predict whether it will rain tomorrow, using data about the weather every day from 2007 to 2017. To download the data, click [here](data/weatherAUS.csv).\n\n::: {#setup .cell execution_count=1}\n``` {.python .cell-code}\n# install necessary packages\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# suppress some annoying warnings\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning) \n\nsns.set_theme(style='darkgrid') # If we don't call this, we just get default matplotlib styling\nsns.set_context(\"notebook\") # Set an overall scale. Notebook is the default. In increasing size: paper, notebook, talk, poster.\nrcParams['font.sans-serif'] = ['Calibri','Segoe UI','Arial'] # use a nicer font in matplotlib (if available)\n```\n:::\n\n\n::: {#import-data .cell execution_count=2}\n``` {.python .cell-code}\n# import the dataset\ndf = pd.read_csv('data/weatherAUS.csv')\n```\n:::\n\n\n## Data manipulation\n\nBefore we start actually generating some visuals, we need to make sure our Date column contains proper datetimes. We're also going to drop the years with partial data so that our dataset only has full years. Finally we're going to change the RainTomorrow field to contain a 0 or a 1 rather than yes/no.\n\n::: {#a4c0b1aa .cell execution_count=3}\n``` {.python .cell-code}\n# convert date column to datetime\ndf['Date'] = pd.to_datetime(df['Date'])\n\n# drop the partial years (2007,2017)\ndf['year'] = df['Date'].dt.year\ndf = df[~df['year'].isin([2007,2017])]\n\n# convert 'RainTomorrow' to a numeric variable, where 'Yes' = 1 and 'No' = 0.\ndf['RainToday']=df['RainToday'].replace({'Yes': 1, 'No': 0, 'NA':0}).fillna(0).astype(int)\ndf['RainTomorrow']=df['RainTomorrow'].map({'Yes': 1, 'No': 0,'NA': 0}).fillna(0).astype(int); \n\n# little tip: the semicolon suppresses textual output when we don't want it\n```\n:::\n\n\nNext, we're going to create some helper dataframes by filtering, grouping and pivoting the data. These will be used for different types of visuals later.\n\n::: {#05b4f7b9 .cell execution_count=4}\n``` {.python .cell-code}\n# we need a month order for our \"mmm\" months - there is probably an official way of doing this...\nmonth_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n# build a month column\ndf['month'] = df['Date'].dt.strftime('%b') # Add a column that just contains the month in mmm format\ndf['month'] = pd.Categorical(df['month'], categories=month_order, ordered=True) # Make it categorical using our custom order so that it appears in the right order\n\n# we're going to filter to top 5 cities from now on\ndf_top5Cities = df[df['Location'].isin(['Perth','Adelaide','Sydney','Melbourne','Brisbane'])]\n\n# a grouped dataframe with the number of rainy days per year and month, and location\ndf_top5Cities_rainyDays = df_top5Cities.groupby(['Location','year', 'month'])['RainToday'].sum().reset_index()\n\n# a couple of fully-pivoted dataframes\ndf_top5Cities_Rainfall_grouped = df_top5Cities.groupby(['Location', 'month'])['Rainfall'].mean().reset_index()\ndf_top5Cities_Rainfall_pivoted = df_top5Cities_Rainfall_grouped.pivot(index=\"Location\",columns=\"month\", values=\"Rainfall\")\n#df_top5Cities_rainyDays_pivoted = df_top5Cities.groupby(['Location', 'month'])['RainToday'].sum().reset_index().pivot(index=\"Location\",columns=\"month\", values=\"RainToday\")\ndf_top5Cities_monthly_rainyDays_pivoted = df_top5Cities.groupby(['Location', 'month','year'])['RainToday'].sum().reset_index().groupby(['Location','month'])['RainToday'].mean().reset_index().pivot(index=\"Location\",columns=\"month\", values=\"RainToday\")\n\n\n# we need a sort order for our city names. This just returns an array with our city names in alphabetical order.\ncolOrder_top5Cities=sorted(df_top5Cities['Location'].unique())\n```\n:::\n\n\nTo enhance a chart we're going to build later, we're going to dynamically calculate some text describing our data range.\n\n::: {#8edc05c7 .cell execution_count=5}\n``` {.python .cell-code}\n# Calculate the date range dynamically; we're going to use this later...\ndate_min = df['Date'].min().strftime('%Y')\ndate_max = df['Date'].max().strftime('%Y')\ndate_range = f\"{date_min} - {date_max}\"\n\nprint(date_range)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2008 - 2016\n```\n:::\n:::\n\n\n## Doing some actual plotting\n\nThe Seaborn home page has very good documentation, as well as a [nice collection of examples](https://seaborn.pydata.org/examples/index.html).\n\n### A basic one-line line chart\n\n::: {#405db6c1 .cell execution_count=6}\n``` {.python .cell-code}\nsns.lineplot(data=df_top5Cities_Rainfall_pivoted.T) #.T gives the transpose (flips rows and columns)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/cell-7-output-1.png){}\n:::\n:::\n\n\n### Just a little bit of customisation - a bar chart\n\n::: {#344099c8 .cell execution_count=7}\n``` {.python .cell-code}\nsns.barplot(data=df_top5Cities_Rainfall_grouped \n            ,x=\"month\"\n            ,y=\"Rainfall\"\n            ,hue=\"Location\" # read \"hue\" as \"series\"\n            ,palette=\"tab10\" # https://matplotlib.org/stable/users/explain/colors/colormaps.html\n           ).set(title='Average daily rainfall by month and city');\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/cell-8-output-1.png){}\n:::\n:::\n\n\n### Heatmaps\n\n::: {#37146dfa .cell execution_count=8}\n``` {.python .cell-code}\n# We need to use some matplotlib code to set our output size, add a title, and capitalise our x-axis label\nf,ax = plt.subplots(figsize=(10, 5)) \nax.set_title(f\"Average daily rainfall (/mm) each month ({date_range}) for Australia's top 5 cities\", fontsize=16, fontweight=\"bold\", pad=10)\n\nsns.heatmap(df_top5Cities_Rainfall_pivoted # Heatmap expects rectangular (pivot-like) data\n            ,annot=True # Put numbers inside the cells\n            ,fmt=\".1f\" # Make the numbers have 1 decimal place\n            ,square=True # Square vs rectangular cells\n            ,cbar=False # Get rid of the colourbar legend on the side\n            ,cmap=\"Blues\" # Seems appropriate for rainfall. Colourmaps reference: https://matplotlib.org/stable/users/explain/colors/colormaps.html \n            ,ax=ax # Tell it to use the matplotlib axes we created earlier\n           )\n\nax.set(xlabel=\"Month\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/cell-9-output-1.png){}\n:::\n:::\n\n\n### Another heatmap with some further tweaks\n\n::: {#bd309eec .cell execution_count=9}\n``` {.python .cell-code}\n# Setting up matplotlib subplots so that we can make some changes later\nf,ax = plt.subplots(figsize=(10, 5)) \n\nsns.heatmap(df_top5Cities_monthly_rainyDays_pivoted # Heatmap expects rectangular (pivot-like) data\n            ,annot=True # Put numbers inside the cells\n            ,fmt=\".0f\" # Force the number format\n            ,square=True # Square vs rectangular cells\n            ,cbar=False # Get rid of the colourbar legend on the side\n            ,cmap=\"crest\" # Colourmaps reference: https://matplotlib.org/stable/users/explain/colors/colormaps.html \n            ,ax=ax # Tell it to use the matplotlib axes we created earlier\n           )\n\n# We need to use some matplotlib code to set our output size, add a title, and capitalise our x-axis label\nax.tick_params(axis='x', labelsize=11, rotation=45) # I think 45-degree month labels look nicer, but this is a matter of taste.\nax.tick_params(axis='y', labelsize=11)\n\n# Manually changing our axis labels for more control\nax.set_xlabel(\"Month\",fontweight=\"bold\",fontsize=12) \nax.set_ylabel(\"City\",fontweight=\"bold\",fontsize=12)\n\n# Set our title dynamically\nax.set_title(f\"Mean number of rainy days by month between {date_min} and {date_max} for Australia's top 5 cities\", fontsize=16, fontweight=\"bold\", pad=15);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/cell-10-output-1.png){}\n:::\n:::\n\n\n### A fancy multi-chart visual\n\n::: {#deb15a8b .cell execution_count=10}\n``` {.python .cell-code}\n# Setting up the grid of box plots\n# Box plots are a bit of a rabbit hole and are extremely customisable; we're mostly using defaults here\nboxgrid = sns.FacetGrid(df_top5Cities \n                        ,col=\"Location\" # Defining the different facets\n                        ,col_wrap=5, height=4.5 # Layout and sizing for our facet grid\n                        ,col_order=colOrder_top5Cities  # Using our alphabetical order of city names to arrange our facets\n)\nboxgrid.map(sns.boxplot # This is what tells sns what sort of plots we want in our grid\n            ,\"month\" # X\n            ,\"MaxTemp\" # Y\n            ,linewidth=1.5\n            ,color=\"skyblue\"\n            ,order=month_order\n            ,fliersize=0 # Seaborn boxplots by default include markers for outliers, which it calls \"fliers\". For this chart we'd like to disable these.\n            ) \n\n# Setting up the grid of line plots\n# Using the default matplotlib plot here\nlinegrid = sns.FacetGrid(df_top5Cities.groupby(['Location', 'month'])['Rainfall'].mean().reset_index()\n                         ,col=\"Location\" \n                         ,hue=\"Location\",palette=\"Set2\" \n                         ,col_wrap=5, height=4.5 \n                         ,col_order=colOrder_top5Cities\n)\nlinegrid.map(plt.plot, \"month\", \"Rainfall\",marker=\"o\")\n\n# Formatting axes\nfor ax in boxgrid.axes.flat:\n    ax.tick_params(axis='x', labelsize=9, rotation=45)\n    ax.tick_params(axis='y', labelsize=9)\nfor ax in linegrid.axes.flat:\n    ax.tick_params(axis='x', labelsize=9, rotation=45)\n    ax.tick_params(axis='y', labelsize=9)\n\nlinegrid.set_titles(col_template=\"{col_name}\",fontweight=\"bold\",fontsize=16)\nlinegrid.set_axis_labels(\"Month\",\"Average rainfall /mm\",fontweight=\"bold\",fontsize=10)\nboxgrid.set_titles(col_template=\"{col_name}\",fontweight=\"bold\",fontsize=16)\nboxgrid.set_axis_labels(\"Month\",\"Max temp /$\\\\degree$C\",fontweight=\"bold\",fontsize=10)\n\n# Setting overall titles and spacing\nlinegrid.fig.suptitle(f\"Mean daily rainfall by month for top 5 cities, {date_range}\", fontsize=16, color='black',fontweight='bold') \nboxgrid.fig.suptitle(f\"Max temperature by month for top 5 cities, {date_range}\", fontsize=16, color='black',fontweight='bold') \nlinegrid.fig.subplots_adjust(top=0.85)  \nboxgrid.fig.subplots_adjust(top=0.85);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/cell-11-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/cell-11-output-2.png){}\n:::\n:::\n\n\n### \"Small multiples\"-type time-series grid\n\n::: {#ae5f5d80 .cell execution_count=11}\n``` {.python .cell-code}\n# Credit to https://seaborn.pydata.org/examples/timeseries_facets.html\n\ndf_Sydney = df[df['Location']==\"Sydney\"].groupby(['month', 'Location','year'], as_index=False)['MaxTemp'].max()\nsns.set_theme()\n\n#Plot each year's time series in its own facet\ng = sns.relplot(data=df_Sydney\n                ,x=\"month\"\n                ,y=\"MaxTemp\"\n                ,col=\"year\"\n                ,hue=\"year\"\n                ,kind=\"line\"\n                ,palette=\"viridis\"\n                ,linewidth=4\n                ,zorder=5\n                ,col_wrap=3, height=2, aspect=1.5, legend=False,\n)\n\n# Iterate over each subplot to customize further\nfor year, ax in g.axes_dict.items():\n\n    # Add the title as an annotation within the plot\n    ax.text(.8\n            ,.85\n            ,year\n            ,transform=ax.transAxes\n            ,fontweight=\"bold\",fontsize=9)\n\n    # Plot every year's time series in the background\n    sns.lineplot(\n        data=df_Sydney, x=\"month\", y=\"MaxTemp\", units=\"year\",\n        estimator=None, color=\".7\", linewidth=1, ax=ax\n    )\n\n# Reduce the frequency of the x axis ticks\nax.set_xticks(ax.get_xticks()[::2])\n\n# Tweak the supporting aspects of the plot\ng.set_titles(\"\")\ng.fig.suptitle(f\"Max temperature by month in Sydney, {date_range}\", fontsize=16, color='black',fontweight='bold') \ng.set_axis_labels(\"\", \"Max Temp /$\\\\degree \\\\mathrm{C}$\");\ng.tight_layout();\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/cell-12-output-1.png){}\n:::\n:::\n\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: C:\\Users\\jonas.willemsen\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3\n---\n",
    "supporting": [
      "index_files\\figure-ipynb"
    ],
    "filters": []
  }
}