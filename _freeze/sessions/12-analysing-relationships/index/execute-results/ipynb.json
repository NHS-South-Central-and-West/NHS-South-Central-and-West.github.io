{
  "hash": "4ee6606bd43ab7b9a79c010abce031ef",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Analysing ~~Penguins~~ Relationships\"\nformat:\n  html: default\n  ipynb: default\n---\n\nThis is the second in our series of sessions that builds the regression foundations. Here we will look at how to explore relationships in data, using both quantitative measures such as correlation and a range of visualisations methods.\n\nThis session discusses what it means to analyse relationships between variables, what is possible with different types of variables (and how this links to the previous session that looked at comparing samples), and what these methods can and cannot tell us.\n\nWe will use the [**Palmer Penguins**](https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-04-15/readme.md) dataset throughout this session, taken from the [TidyTuesday](https://github.com/rfordatascience/tidytuesday/) GitHub repository (originally from the [palmerpenguins](https://allisonhorst.github.io/palmerpenguins/) R package[^Datasets]). We will import the data directly from GitHub, but if you would prefer to download it instead, click <a href=\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-15/penguins.csv\" download>here</a>.\n\n[^Datasets]:\n\nAnd now a part of the Base R datasets package included as default in R installations (R >= 4.5.0).\n\n## Why Analyse Relationships?\n\nWe’ve learned to ask “Does A differ from B?”, but now we can ask, “How do two measures move together?”\n\nIn this session, we’ll explore the penguins dataset to see how body mass relates to flipper length, how bill length relates to bill depth, and how to identify relationships between continuous traits.\n\n## Variables & Framing\n\nIn our previous session, comparing samples, we were comparing the average value of a continuous variable by groups (categorical variables).\n\nHere we will compare two continuous variables, considering how one variable (the outcome) changes in response to changes in the other variable (the predictor).\n\nThere is only a subtle difference between the idea of comparing samples and analysing relationships. You can frame a comparison between groups as analysing the relationship between the groups and the continuous variable, but you are still comparing the average value and dispersion for each group and inferring the relationship (or association) from this. When comparing two continuous variables, you can't reduce either to their average, and are instead making statements about the way they vary together.\n\n## Load & Preview Penguins Data\n\n::: {#cell-import-data .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\n# load penguins data from TidyTuesday URL\nurl = 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-15/penguins.csv'\npenguins_raw = pd.read_csv(url)\npenguins_raw.head()\n```\n\n::: {#import-data .cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_len</th>\n      <th>bill_dep</th>\n      <th>flipper_len</th>\n      <th>body_mass</th>\n      <th>sex</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThere are several missing values in this dataset. While we should generally be a little careful when discarding missing values, we will do so here just to simplify the process.\n\n::: {#cell-clean-data .cell execution_count=2}\n``` {.python .cell-code}\n# drop missing values\ndf = penguins_raw.dropna()\ndf.shape\n```\n\n::: {#clean-data .cell-output .cell-output-display execution_count=16}\n```\n(333, 8)\n```\n:::\n:::\n\n\n## Visualing Relationships\n\n::: {#cell-fig-flipper-mass-scatter-plot .cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# scatter of flipper length vs. body mass\nplt.figure(figsize=(8, 6))\nsns.scatterplot(\n    data=df,\n    x='flipper_len',\n    y='body_mass',\n    hue='species',\n    alpha=0.7\n)\nplt.title('The Relationship Between Flipper Length & Body Mass')\nplt.xlabel('Flipper Length (mm)')\nplt.ylabel('Body Mass (g)')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/fig-flipper-mass-scatter-plot-output-1.png){#fig-flipper-mass-scatter-plot}\n:::\n:::\n\n\n**Questions:**\n\n- What pattern do you see in @fig-flipper-mass-scatter-plot?\n- How does body mass change when flipper length increases, according to this plot?\n- Are there differences by species?\n\n::: {#cell-fig-bill-scatter-plot .cell execution_count=4}\n``` {.python .cell-code}\n# scatter of bill length vs. bill depth\nplt.figure(figsize=(8, 6))\nsns.scatterplot(\n    data=df,\n    x='bill_len',\n    y='bill_dep',\n    hue='species',\n    alpha=0.7\n)\nplt.title('The Relationship Between Bill Length & Bill Depth')\nplt.xlabel('Bill Length (mm)')\nplt.ylabel('Bill Depth (mm)')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/fig-bill-scatter-plot-output-1.png){#fig-bill-scatter-plot}\n:::\n:::\n\n\n**Questions:**\n\n- What pattern do you see in @fig-bill-scatter-plot?\n- How does bill depth change when bill length increases, according to this plot?\n- Are there differences by species?\n\n## Computing Correlations\n\n### Pairwise Correlation\n\nWe can compute the correlation between two variables, using `scipy.stats`.\n\n::: {#flipper-mass-correlation .cell execution_count=5}\n``` {.python .cell-code}\nfrom scipy.stats import pearsonr\n\nr, p = pearsonr(df['flipper_len'], df['body_mass'])\nprint(f\"Correlation (r) = {r:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCorrelation (r) = 0.87\n```\n:::\n:::\n\n\nA correlation of 0.87 is very strong. There is clearly a very strong association between flipper length and body mass. However, we can't claim that flipper length causes body mass just based off this. Correlation does not imply causation[^Correlation].\n\nWhen we visualised the relationship between bill length and bill depth, there appeared to be a grouping structure going on that complicated things, and the overall relationship appeared pretty noisy.\n\n::: {#bill-correlation .cell execution_count=6}\n``` {.python .cell-code}\nr, p = pearsonr(df['bill_len'], df['bill_dep'])\nprint(f\"Correlation (r) = {r:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCorrelation (r) = -0.23\n```\n:::\n:::\n\n\nAs a result, the correlation score is much lower. A correlation of -0.23 tells us two things:\n\n- The negative correlation means that when bill length increases, bill depth tends to decrease.\n- The weaker correlation suggests that this decrease is a lot noisier, and it is much harder to estimate a penguin's bill depth using their bill length.\n\nA correlation of +/- ~0.2 doesn't necessarily mean there is no relationship. There are lots of ways correlation can mislead, because it is a limited measure. Visualising the relationship between bill length and bill depth showed us that species is highly relevant, and not factoring this in limits what we can say about this relationship.\n\n[^Correlation]:\n\nCorrelation might not imply causation, but it is important to realise that the presence of correlation does not mean causation is _not_ present. You just can't conclude causation exists simply because you observe a correlation.\n\n### Correlation Matrix\n\nWe may be interested in the pairwise correlation between multiple variables. If so, computing each correlation between pairs of variables is very cumbersome. Instead, we can compute a correlation matrix.\n\n::: {#cell-correlation-matrix .cell execution_count=7}\n``` {.python .cell-code}\n# compute correlation matrix\n(\n    df.select_dtypes(include='number')\n    .corr()\n    .round(2)\n)\n```\n\n::: {#correlation-matrix .cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_len</th>\n      <th>bill_dep</th>\n      <th>flipper_len</th>\n      <th>body_mass</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>bill_len</th>\n      <td>1.00</td>\n      <td>-0.23</td>\n      <td>0.65</td>\n      <td>0.59</td>\n      <td>0.03</td>\n    </tr>\n    <tr>\n      <th>bill_dep</th>\n      <td>-0.23</td>\n      <td>1.00</td>\n      <td>-0.58</td>\n      <td>-0.47</td>\n      <td>-0.05</td>\n    </tr>\n    <tr>\n      <th>flipper_len</th>\n      <td>0.65</td>\n      <td>-0.58</td>\n      <td>1.00</td>\n      <td>0.87</td>\n      <td>0.15</td>\n    </tr>\n    <tr>\n      <th>body_mass</th>\n      <td>0.59</td>\n      <td>-0.47</td>\n      <td>0.87</td>\n      <td>1.00</td>\n      <td>0.02</td>\n    </tr>\n    <tr>\n      <th>year</th>\n      <td>0.03</td>\n      <td>-0.05</td>\n      <td>0.15</td>\n      <td>0.02</td>\n      <td>1.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can also visualise a correlation matrix, shown below in @fig-correlation-matrix-plot.\n\n::: {#cell-fig-correlation-matrix-plot .cell execution_count=8}\n``` {.python .cell-code}\n# add correlation matrix to summarise relationships\ncorr_matrix = df.select_dtypes(include='number').corr()\n# plot heatmap\nplt.figure(figsize=(8, 6))\nsns.heatmap(corr_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)\nplt.title(\"Correlation Matrix\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/fig-correlation-matrix-plot-output-1.png){#fig-correlation-matrix-plot}\n:::\n:::\n\n\nIf you are concerned with a certain outcome and you want to quickly look at the correlation between all other continuous variables and the outcome, you can also compute this.\n\n::: {#cell-body-mass-correlations .cell execution_count=9}\n``` {.python .cell-code}\n# correlations of all numeric variables with body mass\n(\n    df.select_dtypes(include='number')\n    .corr()['body_mass']\n    .drop('body_mass')\n    .round(2)\n)\n```\n\n::: {#body-mass-correlations .cell-output .cell-output-display execution_count=23}\n```\nbill_len       0.59\nbill_dep      -0.47\nflipper_len    0.87\nyear           0.02\nName: body_mass, dtype: float64\n```\n:::\n:::\n\n\n## Correlation's Limitations\n\nComputing correlation can be very informative, but there are a lot of ways it is limited. Correlation (at least the most common method for calculating correlation, Pearson's _r_[^R]) does not handle non-linearity well.\n\n::: {#cell-fig-non-linear-relationships .cell execution_count=10}\n``` {.python .cell-code}\nimport numpy as np\n\n# simulate a u‑shaped relationship example\nx_sim = np.linspace(-3, 3, 200)\ny_sim = x_sim**2 + np.random.normal(0, 1, 200)\nsim = pd.DataFrame({'x': x_sim, 'y': y_sim})\n\nplt.figure(figsize=(6, 4))\nsns.scatterplot(data=sim, x='x', y='y')\nplt.title('u-shaped pattern')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/fig-non-linear-relationships-output-1.png){#fig-non-linear-relationships}\n:::\n:::\n\n\n::: {#non-linear-correlation .cell execution_count=11}\n``` {.python .cell-code}\nr, p = pearsonr(sim['x'], sim['y'])\nprint(f\"Correlation (r) = {r:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCorrelation (r) = -0.02\n```\n:::\n:::\n\n\n**Takeaway:** Pearson’s _r_ misses non-linear relationships\n\n[^R]:\n\nThere are a number of other ways of calculating correlation, including methods that account for non-linearity, but more often than not you will encounter Pearson's _r_. Any time correlation is mentioned without specifying the way it was calculated, you should assume it is using Pearson's _r_.\n\n## Visualising Linear Regressions\n\n::: {#cell-fig-flipper-mass-regression-plot .cell execution_count=12}\n``` {.python .cell-code}\n# add linear fit line\nsns.regplot(\n    data=df,\n    x='flipper_len',\n    y='body_mass',\n    scatter=True,\n    ci=95\n)\nplt.title('Adding a Regression Line')\nplt.xlabel('Flipper Length (mm)')\nplt.ylabel('Body Mass (g)')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/fig-flipper-mass-regression-plot-output-1.png){#fig-flipper-mass-regression-plot}\n:::\n:::\n\n\n::: {#cell-fig-bill-regression-plot .cell execution_count=13}\n``` {.python .cell-code}\n# add linear fit line\nsns.regplot(\n    data=df,\n    x='bill_len',\n    y='bill_dep',\n    scatter=True,\n    ci=95\n)\nplt.title('Adding a Regression Line')\nplt.xlabel('Bill Length (mm)')\nplt.ylabel('Bill Depth (mm)')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/fig-bill-regression-plot-output-1.png){#fig-bill-regression-plot}\n:::\n:::\n\n\n## Visualisation Limitations\n\nVisualising relationships has many of the same issues that computing correlation does, but fundamentally the biggest issue is that it is pairwise, and few relationships are strictly pairwise in the real world.\n\n@fig-bill-regression-plot points to another limitation with Pearson's *r* that also applies to regression plots. Grouping structures!\n\n::: {#cell-fig-grouping-structures .cell execution_count=14}\n``` {.python .cell-code}\nsns.lmplot(data=df, x=\"bill_len\", y=\"bill_dep\", hue=\"species\")\n\nplt.title('Accounting for groups')\nplt.xlabel('Bill Length (mm)')\nplt.ylabel('Bill Depth (mm)')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/fig-grouping-structures-output-1.png){#fig-grouping-structures}\n:::\n:::\n\n\n@fig-grouping-structures shows how pairwise examination of relationships can miss so much.\n\nDrawing a straight line through data is strictly linear, but unlike correlation coefficients, you will be able to _see_ when this is inappropriate. A linear regression plot will not handle the non-linear pattern above any better than a correlation coefficient, but you will be able to see the problem for yourself.\n\nVisualising data helps you to get a sense of how two variables are related, but where you are seeking to understand the relationship between variables, or even explain what causes a certain outcome, you have to go further.\n\n## Summary\n\n- Visualising data can help intuit how variables are related.\n- Correlations can tell us a lot, but typical methods for calculating correlation will miss non-linearity.\n- Correlation does not imply causation (but does not _not_ imply causation, either).\n- Both of these approaches are generally only able to handle pairwise relationships.\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: c:\\Users\\paul.johnson\\git\\code-club\\.venv\\share\\jupyter\\kernels\\python3\n---\n",
    "supporting": [
      "index_files\\figure-ipynb"
    ],
    "filters": []
  }
}